{"version":3,"file":"glpairs.min.js","sources":["Resources/Public/js/glpairs.js"],"sourcesContent":["/***************************************************************\n *  Copyright notice\n *\n *  (c) 2014 Gerald Loß\n *  All rights reserved \n *\n *  This script is part of the TYPO3 project. The TYPO3 project is\n *  free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  The GNU General Public License can be found at\n *  http://www.gnu.org/copyleft/gpl.html.\n *\n *  This script is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  This copyright notice MUST APPEAR in all copies of the script!\n ***************************************************************/\n// some JSHint options\n// some global variables we don't need to define here\n/*global jQuery:false */\n/*global window:false */\n\n/**\n * The main pairs class\n * \n * @author Gerald Loß\n * @Class \tGLPairs \tThe main pairs functions on the client side.\n * @constructor\n * @param {string}\tUnique ID of the pairs game. It consist of a prefix with the content element ID\n * \t\t\t\t\tand a suffix with the uID of the pairs game separated bei an underscore (e.g. 88_234) \n */\nfunction GlPairs(i_strUniqueId) {\n\t// turn on the strict mode\n\t\"use strict\";\n\t\n\t// ***************************************************************/\n\t// Constructor code and definition of the member attributes \n\t// of this class\n\t// ***************************************************************/\n\n\t// store this object in the static array\n\tGlPairs.arrPairs[i_strUniqueId] = this;\n\t\n\t/**\n\t * store the Pairs ID in a private variable.\n\t * It consist of a prefix with the content element ID and a suffix with \n\t * the uID of the pairs game separated bei an underscore (e.g. 88_234)  */\n\tvar m_strPairsId = i_strUniqueId; \n\n\t/**\n\t * Ajax mode, if this flag is true, then we waiting for an ajax request*/\n\tvar m_blnAjaxMode = false;\n\t\n\t/**\n     * Object with the mapping from external ID to the uID\n     * First Index: \tThe external ID of the Pair\n     * Value:\t\t\tThe uID of the Pair\n     * \n     * @var array\n\t */\n\tvar m_arrExtIdMapping = null;\n\t\n\t/**\n     * Object with the status of every card if currently is shown the frontside or backside\n     * First Index: \tThe external ID of the Pair\n     * Value:\t\t\ttrue for frontside or false for backside\n     * \n     * @var array\n\t */\n\tvar m_objCardTurnState = {};\n\n\t/**\n     * Object with the mapping from the uID to the external ID \n     * First Index: \tThe uID of the Pair\n     * Value:\tarray with 2 dimensions (see constants with prefix C_STR_ARR_ID_EXT_ID):\n     * \t\t  extID1: \tThe extID1 of the pair\n     * \t\t  extID2: \tThe extID2 of the pair\n     * @var array\n     */\n    var m_arrUidMapping = null;\n    \n    /**\n     * Object with the final information data.\n     * \t \tIndex: The uID of the Pair\n\t * \t\tValue: Array(\n\t * \t\t\t  isActive  => True if the final information is activated\n\t * \t\t\t  content   => HTML content with the final information\n\t * \t\t\t  width     => The width of the final information\n\t * \t\t\t  height    => The height of the final information\n\t * \t\t\t  picwidth  => The width of the picture(s)\n\t * \t\t\t  picheight => The height of the picture(s)\n\t *  \t\t)\n     */\n    var m_objFinalInformation = null;\n    \n    /**\n     * The Type of the pairs game. See the constants with the prefix C_INT_PAIRS_TYPE*\n     * @var string\n     */\n    var m_intPairsType = '';\n    \n    /**\n     * Flag if we are in splitmode. Splitmode means all card pairs are separated.\n     * The first cards of the pairs are in the upper area and the second card of \n     * the pairs are in the lower area of the html screen.\n     * @var boolean\n     */\n    var m_blnSplitmode = false;\n    \n    /**\n     * Object with all localized strings for this frontend.\n     * See Method PairsController->getI18nFrontendValues() for all values in this object.\n     */\n    var m_objI18n = null;\n    \n    /**\n     * Object with all parameters for the choosed cards in the game.\n     * If we are not in splitmode, then it dont cares of upper and lower card. \n     * The upper card is then always the first and the lower card is always the second \n     * choosed card.\n     * \n     * The following parameters are available:\n     * upperCardChoosed:\tTrue if the first card is choosed\n     * lowerCardChoosed:\tTrue if the second card is choosed\n     * upperExtId:\t\t\tExtId of the upper choosed card\n     * lowerExtId:\t\t\tExtId of the lower choosed card\n     */\n    var m_objClickedCardParams = {\tupperCardChoosed\t:\tfalse,\n    \t\t\t\t\t\t\t\tlowerCardChoosed\t:\tfalse,\n    \t\t\t\t\t\t\t\tupperExtId\t\t\t: \t0,\n    \t\t\t\t\t\t\t\tlowerExtId\t\t\t:\t0\t};\n    \n    /**\n     * Handler for the timeout for the overlay div and its click event.\n     * With this variable we can cancel the timeout, if the user click\n     * by himself on the overlay div.\n     */\n    var m_TimeoutOverlayClick = null;\n    \n    /**\n     * Handler for the timeout for the anmiation with a hint\n     * that the user has to click for going on after he has choose\n     * two cards.\n     */\n    var m_TimeoutClickHint = null;\n\n    /**\n     * The number of pairs in this pairs game.\n     */\n    var m_intPairsCount = 0;\n    \n    /**\n     * Milliseconds after then the cards turn back automatically, if you have choosed two cards\n     */\n    var m_intTurnbackDelay = 20000;\n    \n    /**\n     * Milliseconds after then hint apears, that the user has to click for going on\n     */\n    var m_intClickHintDelay = 10000;\n    \n    /**\n     * Miliseconds for the turn animation of the cards\n     */\n    var m_intTurnDuration = 500;\n    \n    /**\n     * Miliseconds for the animation of the move of the cards to the stack\n     */\n    var m_intMoveStackDuration = 500;\n    \n    /**\n     * The Points for a correct choice\n     */\n    var m_intPointsPlus = 5;\n    \n    /**\n     * The Points for a wrong choice\n     */\n    var m_intPointsMinus = 1;\n    \n    /**\n     * Flag if test mode is activated.\n     */\n    var m_blnTestMode = false;\n    \n    /**\n     * Delay between every turn of the cards in the test mode.\n     */\n    var m_intTestModeTurnDelay = 0;\n\n    // ***************************************************************/\n\t// Public or privileged function part\n\t// ***************************************************************/\n\t\n\t\n\t/**\n\t * request with AJAX all ID Mappings\n\t * \n\t * @function\n\t */\n\tthis.requestAjaxGeneralPairsData = function() {\n\t\t\n\t\t// send the ajax action 'ajaxBasicData' to the backend\n\t\t// with this function will be collected all general data for the pairs game\n\t\tvar strGetParams = jQuery.param({ controllerName  : 'Pairs',\n\t\t\t\t\t\t\t\t\t\t  actionName\t  : 'ajaxBasicData',\n\t\t\t\t\t\t\t\t\t\t  actionArguments : { i_strUniquId : m_strPairsId }\n\t\t\t\t\t\t\t\t\t\t});\n\t\t// set the ajax mode\n\t\tthis.setAjaxWaitParams(true);\n\t\t// start the inital ajax request\n\t\tjQuery.ajax({\n\t\t\turl: '/?PSR-15-eID=glpairs&' + strGetParams,\n\t\t\tdataType: 'json'\n\t\t\t}).done( function(i_jsonResult){\n\t\t\t\t\t\t\tGlPairs.glpairsHandleAjaxResponse(\"processAjaxGeneralPairsData\", i_jsonResult);\n\t\t\t\t\t\t}\n\t\t\t);\n\t};\n\n\t/**\n\t *  handler for the Ajax answer with all pairs ID Mappings\n\t *  \n\t * @function\n\t * @param {Object}\ti_jsonResult\tThe received json data.\n\t */\n\tthis.processAjaxGeneralPairsData = function(i_jsonResult) {\n\t\t// retrieve the mappings from external ID to uID\n\t\tm_arrExtIdMapping = i_jsonResult.result.arrExtIdMap;\n\t\t// mapping from uID to external ID\n\t\tm_arrUidMapping = i_jsonResult.result.arrUidMap;\n\t\t// and the pairs type\n\t\tm_intPairsType = i_jsonResult.result.pairsType;\n\t\t// the splitmode of the game\n\t\tm_blnSplitmode = i_jsonResult.result.splitmode;\n\t\t// the localized strings for the frontend\n\t\tm_objI18n = i_jsonResult.result.i18n;\n\t\t// the number of pairs in the game\n\t\tm_intPairsCount = i_jsonResult.result.pairscount;\n\t\t\n\t\t// set the parameters from the backend\n\t\tm_intPointsPlus = i_jsonResult.result.pluspoints;\n\t\tm_intPointsMinus = i_jsonResult.result.minuspoints;\n\t\tm_intTurnbackDelay = i_jsonResult.result.turnbackdelay;\n\t\tm_intClickHintDelay = i_jsonResult.result.hintdelay;\n\t\tm_intTurnDuration = i_jsonResult.result.turnduration;\n\t\tm_intMoveStackDuration = i_jsonResult.result.stackduration;\n\t\tm_blnTestMode = i_jsonResult.result.testmode;\n\t\tm_intTestModeTurnDelay = i_jsonResult.result.testmodeturndelay;\n\t\tm_objFinalInformation = i_jsonResult.result.finalinformation;\n\t\t\n\t\t// initialize some global values\n\t\tinitializeGlobals();\n\t\t\n\t\t// if we are in test mode\n\t\tif (m_blnTestMode) {\n\t\t\tperformTestMode();\n\t\t} \n\n\t\t// register the events for the card elements\n\t\tregisterCardEvents();\n\t};\n\t\n\t\n\t/**\n\t * Set the wait mouse cursor for the whole pairs game and some other parameters\n\t * \n\t * @function\n\t * @memberOf GLPairs\n\t * @param\ti_blnSet\t{boolean}\tIf True then set the Wait parameters, if false then unset.\n\t */\n\tthis.setAjaxWaitParams = function(i_blnSet) {\n\t\t\n\t\t// the ID of the main div container\n\t\tvar l_strMainDivID =\"\";\n\t\t\n\t\t// get the ID\n\t\tl_strMainDivID = getMainDivId();\n\t\t\n\t\t// if set the wait parameters\n\t\tif (i_blnSet === true) {\n\t\t\t// set the wait cursor for the mouse\n\t\t\tjQuery(l_strMainDivID).css(\"cursor\", \"wait\");\n\t\t\t// set the ajax mode\n\t\t\tm_blnAjaxMode = true;\n\t\t}\n\t\t\n\t\t// if unset the wait parameters\n\t\telse {\n\t\t\t// unset the ajax mode\n\t\t\tm_blnAjaxMode = false;\n\t\t\t// unset the wait cursor for the mouse\n\t\t\tjQuery(l_strMainDivID).css(\"cursor\", \"auto\");\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * Handle the mouse click event on a card of the pairs game.\n\t * \n\t * @function\n\t * @param {object}\ti_objEvent\t\t\t\tEvent object with the data of the event.\n\t * @param {object}\t$i_objCurrentCard\tCurrent card which has received the click event.\n\t */\n\tthis.onMouseClickCard = function(i_objEvent, $i_objCurrentCard) {\n\t\t// object with the content element uID and the internal ID\n\t\tvar l_objElementId = {};\n\t\t\n\t\tl_objElementId = getIdArrayFromId($i_objCurrentCard.attr('id'));\n\t\t\n\t\t// if we are in test mode\n\t\t// and this pair has a final information\n\t\tif (m_blnTestMode &&\n\t\t\tm_objFinalInformation[m_arrExtIdMapping[l_objElementId.extId]].isActive) {\n\t\t\t\n\t\t\t// set the global variables with the booth choosed cards\n\t\t\tsetCorrespondingChoosedCards(l_objElementId);\n\t\t\t\n\t\t\t// show the final information\n\t\t\tshowFinalInformation(m_objFinalInformation[m_arrExtIdMapping[l_objElementId.extId]], m_blnTestMode);\t\n\t\t\t\t\n\t\t\t// initialize the global atttribute with the currently chosed cards\n\t\t\tinitializeClickedCardParams();\n\n\t\t}\n\t\t// if we are in test mode\n\t\t// and this pair has no final information\n\t\telse if (m_blnTestMode &&\n\t\t\tm_objFinalInformation[m_arrExtIdMapping[l_objElementId.extId]].isActive === false) {\n\t\t\t\n\t\t\t// flip over the card\n\t\t\tflipOverCard(l_objElementId.extId, l_objElementId.area ); \n\t\t\tflipOverCard(getCorrespondingExtId(l_objElementId.extId), getCorrespondingArea(l_objElementId.area) ); \n\t\t\n\t\t}\n\t\t// if the click on this card was allowed\n\t\telse if (isClickAllowed(l_objElementId)){\n\t\t\t\n\t\t\t// unregister the click events if two correct cards are choosed\n\t\t\tunregisterEventsConditional();\n\t\t\t\n\t\t\t// flip over the card\n\t\t\tflipOverCard(l_objElementId.extId, l_objElementId.area ); \n\t\t\t\n\t\t\t// check if the choosen pair is correct\n\t\t\tcheckForCorrectPair();\n\t\t}\n\t};\n\t\n\t/**\n\t * Handle the mouse click event on the overlay div after the both cards are choosen.\n\t * \n\t * @function\n\t * @param {object}\ti_objEvent\t\t\t\tEvent object with the data of the event.\n\t * @param {object}\t$$i_objOverlay\t\t\tThe averlay div which has received the click event.\n\t */\n\tthis.onMouseClickOverlayPairFinished = function(i_objEvent, $i_objOverlay) {\n\t\t\n\t\t// the click hint element\n\t\tvar $l_objClickHint = null;\n\n\t\t\n\t\t// first cancel timeout if this is an user click\n\t\twindow.clearTimeout(m_TimeoutOverlayClick);\n\t\twindow.clearTimeout(m_TimeoutClickHint);\n\t\t\n\t\t// destroy the overlay again\n\t\t$i_objOverlay.remove();\n\t\t\n\t\t// if the animation with the cklick hint is already running, \n\t\t// then try to stop it now\n\t\t$l_objClickHint = jQuery('#' + m_strPairsId + '_' + GlPairs.C_STR_ID_SUFFIX_CLICK_HINT);\n\t\t$l_objClickHint.remove();\n\t\t\n\t\t// do the after pair processing\n\t\tafterPairProcessing();\n\t};\n\n\t/**\n\t * The event of the end of the turn back of the cards. This event is only registerd if\n\t * two correct cards are choosen. In this case must the both cards moved to the card stack\n\t * after the turn back animation is finished.\n\t * \n\t * @function\n\t * @param {object}\ti_objEvent\t\t\t\tEvent object with the data of the event.\n\t * @param {object}\t$i_objBackCard\t\t\tThe back card which should be moved to the card stack\n\t */\n\tthis.onTurnBackCardEnd = function(i_objEvent, $i_objBackCard) {\n\t\t\n\t\t// animate the card to the stack\n\t\tanimateCard2Stack($i_objBackCard);\n\t};\n\t\n\t// ***************************************************************/\n\t// Private function part\n\t// ***************************************************************/\n\t\n\t/**\n\t * Regsiter with jQuery all Events for the cards.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t */\n\tfunction registerCardEvents(){\n\t\t// the ID of the main div element container for this pairs game\n\t\tvar l_strMainDivId = '';\n\t\t\n\t\tl_strMainDivId = getMainDivId();\n\t\t\n\t\t// select all elements of this pairs container and filter\n\t\t// for all anchor elements of the cards\n\t\tjQuery(l_strMainDivId).find(\".glpairs_cls_click_content\").each(\n\t\t\tfunction(i_intIndex){\n\t\t\t\t// the current anchor element\n\t\t\t\tvar $l_objCurrentAnchor = jQuery(this);\n\t\t\t\t\n\t\t\t\t// register the mouse click event\n\t\t\t\t$l_objCurrentAnchor.click(\n\t\t\t\t\tfunction(i_objEvent){\n\t\t\t\t\t\t// call the event handler which delegates the request to the actual handler\n\t\t\t\t\t\tGlPairs.glpairsEventHandler(m_strPairsId, i_objEvent, 'onMouseClickCard', $l_objCurrentAnchor);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\n\t\t);\n\t}\n\t\n\t/**\n\t * Returns the ID of the main div container which contains the whole pairs game\n\t * with a # prefix for jQuery\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t */\n\tfunction getMainDivId(){\n\t\t\n\t\t// the ID of the main div container\n\t\tvar l_strID =\"\";\n\t\t\n\t\tl_strID = \"#\" + m_strPairsId + \"_glpairs_container\";\n\t\treturn l_strID;\n\t}\n\t\n\t/**\n\t * Returns an array with the id prefix of an HTML element ID.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * @return {object}\tObject with four elements\n\t * \t\t\t\t\t\tpairsId:\tID for the content element of the whole pairs game\n\t * \t\t\t\t\t\textId:\t\tinternal Id of the card\n\t * \t\t\t\t\t\tarea:\t\tweather we are in the lower or upper area\n\t * \t\t\t\t\t\tsuffix:\t\tthe suffix of the ID\n\t */\n\tfunction getIdArrayFromId(i_strId){\n\t\t// the position in the string\n\t\tvar l_intStrPos = 0;\n\t\t// the returning object\n\t\tvar l_objResult = { 'pairsId': \t0,\n\t\t\t\t\t\t\t'extId':\t0,\n\t\t\t\t\t\t\t'area':\t\t'',\n\t\t\t\t\t\t\t'suffix':\t''};\n\t\t\n\t\t// get the Pairs ID ****************************************************************\n\t\t// get the position of the first underscore\n\t\tl_intStrPos = i_strId.indexOf('_');\n\t\t// get the pairs ID\n\t\tl_objResult.pairsId = i_strId.substr(0, l_intStrPos);\n\t\tl_intStrPos++;\n\t\t// delete the prefix with the pairs ID\n\t\ti_strId = i_strId.substr(l_intStrPos);\n\t\t// get the position of the first underscore\n\t\tl_intStrPos = i_strId.indexOf('_');\n\t\t// get the internal ID\n\t\tl_objResult.pairsId = l_objResult.pairsId + '_' + i_strId.substr(0, l_intStrPos);\n\n\t\t// get the external ID **************************************************************\n\t\tl_intStrPos++;\n\t\t// delete the prefix with the pairs ID\n\t\ti_strId = i_strId.substr(l_intStrPos);\n\t\t// get the position of the first underscore\n\t\tl_intStrPos = i_strId.indexOf('_');\n\t\t// get the internal ID\n\t\tl_objResult.extId = i_strId.substr(0, l_intStrPos);\n\n\t\t// get the area *********************************************************************\n\t\tl_intStrPos++;\n\t\t// delete the prefix with the internal ID\n\t\ti_strId = i_strId.substr(l_intStrPos);\n\t\t// get the position of the first underscore\n\t\tl_intStrPos = i_strId.indexOf('_');\n\t\t// get the area\n\t\tl_objResult.area = i_strId.substr(0, l_intStrPos);\n\n\t\t// get the suffix ********************************************************************\n\t\tl_intStrPos++;\n\t\t// the remaining is the suffix\n\t\tl_objResult.suffix = i_strId.substr(l_intStrPos);\n\t\t\n\t\t// return the result\n\t\treturn l_objResult;\n\t}\n\t\n\t\n\t/**\n\t * Returns an array with the id prefix of an HTML element ID.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * @param integer\ti_intExtID\t\t\tThe external ID of the card.\n\t * @param string\ti_strArea\t\t\tThe area of the card. Upper or lower area is possible.\n\t * @param string \ti_strCardElement\tElement of the card (back or front)\n\t * @param boolean\ti_blnToFront\t\tTrue if the element should turn to the front else to the back\n\t */\n\tfunction toggleClassOfCardElement(i_intExtId, i_strArea, i_strCardElement, i_blnToFront){\n\t\t// a card element\n\t\tvar $l_objCardElement = null;\n\t\t// id of the div element of a card\n\t\tvar l_strCardDivId = '';\n\t\t// the turn duration in seconds\n\t\tvar l_fltTurnDuration = 0;\n\t\t\n\t\t// build the ID of the cardelement\n\t\tl_strCardDivId = getIdFromExtId(i_intExtId, i_strArea, i_strCardElement);\n\t\t\n\t\t// get the div element with the ID\n\t\t$l_objCardElement = jQuery(l_strCardDivId);\n\t\t\n\t\t\n\t\t\n\t\t// set the duration in seconds\n\t\tl_fltTurnDuration = Math.round( m_intTurnDuration / 100 );\n\t\tl_fltTurnDuration = l_fltTurnDuration / 10;\n\t\t$l_objCardElement.css('transition', 'all ' + l_fltTurnDuration + 's');\n\t\t\n\n\t\t// if the turn to the front side is demanded \n\t\tif ( i_blnToFront){\n\t\t\t// turn to frontside\n\t\t\t$l_objCardElement.css({'transform' : 'rotateY( 0deg )',\n\t\t\t\t\t\t\t\t  '-moz-transform' : 'rotateY( 0deg )',\n\t\t\t\t\t\t\t\t  '-ms-transform' : 'rotateY( 0deg )',\n\t\t\t\t\t\t\t\t  '-o-transform' : 'rotateY( 0deg )',\n\t\t\t\t\t\t\t\t  '-webkit-transform' : 'rotateY( 0deg )'});\n\t\t} else {\n\t\t\t// turn to backside\n\t\t\t$l_objCardElement.css({'transform' : 'rotateY( 180deg )',\n\t\t\t\t\t\t\t\t   '-moz-transform' : 'rotateY( 180deg )',\n\t\t\t\t\t\t\t\t   '-ms-transform' : 'rotateY( 180deg )',\n\t\t\t\t\t\t\t\t   '-o-transform' : 'rotateY( 180deg )',\n\t\t\t\t\t\t\t\t   '-webkit-transform' : 'rotateY( 180deg )'});\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Check if mouseclick of a card is in the current state allowed.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * @param {object}\ti_objElementId\t\tArray with three elements of the current clicked card.\n\t * \t\t\t\t\t\t\t\t\t\t\tpairsId:\tID for the content element of the whole pairs game\n\t * \t\t\t\t\t\t\t\t\t\t\textId:\t\tinternal Id of the card\n\t * \t\t\t\t\t\t\t\t\t\t\tarea:\t\tweather we are in the lower or upper area\n\t * \t\t\t\t\t\t\t\t\t\t\tsuffix:\t\tthe suffix of the ID\n\t * @return boolean\t\t\t\t\t\tTrue if the click was allowed\n\t */\n\tfunction isClickAllowed(i_objElementId){\n\t\t// the returning flag, it is by default true\n\t\tvar l_blnReturn = true;\n\t\t// the html element for the modal dialog \n\t\tvar modalElement = null;\n\t\t\n\t\t// if there are still two cards choosen\n\t\t// this could only happen if the user click very fast and often on the screen\n\t\tif ( m_objClickedCardParams.upperCardChoosed && \n\t\t\t\tm_objClickedCardParams.lowerCardChoosed ) {\n\n\t\t\t// do nothing\n\t\t\tl_blnReturn = false;\n\t\t\n\t\t// if the same card was clicked again\n\t\t} else if (   m_objClickedCardParams.upperExtId == i_objElementId.extId ||\n\t\t\t\t\t  m_objClickedCardParams.lowerExtId == i_objElementId.extId ){\n\t\t\t// do nothing\n\t\t\tl_blnReturn = false;\n\t\t\n\t\t// if we are in split mode\n\t\t} else if (m_blnSplitmode) {\n\t\t\t\n\t\t\t// if a card of the upper area is clicked\n\t\t\tif (i_objElementId.area == GlPairs.C_STR_AREA_UPPER ) {\n\t\t\t\t// if a card of the upper area is already choosed\n\t\t\t\tif (m_objClickedCardParams.upperCardChoosed){\n\t\t\t\t\t\n\t\t\t\t\t// return false\n\t\t\t\t\tl_blnReturn = false;\n\t\t\t\t\t\n\t\t\t\t\t// the modal dialog \n\t\t\t\t\tvar modalDialog = null;\n\t\t\t\t\tvar modalElement = null;\n\n\t\t\t\t\t// start a error dialog\n\t\t\t\t \tmodalElement = jQuery(getModalHtmlElement(m_objI18n.errorWrongCardClickedUpper));\n\t\t\t\t\tnew bootstrap.Modal(modalElement).show();\n\t\t\t\t\t\n\t\t\t\t// if no card of this area is choosed\n\t\t\t\t} else {\n\t\t\t\t\t// remember this state and the external ID\n\t\t\t\t\tm_objClickedCardParams.upperCardChoosed = true;\n\t\t\t\t\tm_objClickedCardParams.upperExtId = i_objElementId.extId;\n\t\t\t\t}\n\n\t\t\t// if a card of the lower area is clicked\n\t\t\t} else if (i_objElementId.area == GlPairs.C_STR_AREA_LOWER ) {\n\t\t\t\t// if a card of the upper area is already choosed\n\t\t\t\tif (m_objClickedCardParams.lowerCardChoosed){\n\t\t\t\t\t// return false\n\t\t\t\t\tl_blnReturn = false;\n\t\t\t\t\t// start a error dialog\n\t\t\t\t \tmodalElement = jQuery(getModalHtmlElement(m_objI18n.errorWrongCardClickedLower));\n\t\t\t\t\tnew bootstrap.Modal(modalElement).show();\n\n\t\t\t\t// if no card of this area is choosed\n\t\t\t\t} else {\n\t\t\t\t\t// remember this state and the external ID\n\t\t\t\t\tm_objClickedCardParams.lowerCardChoosed = true;\n\t\t\t\t\tm_objClickedCardParams.lowerExtId = i_objElementId.extId;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t// if we are not in splitmode\n\t\t} else {\n\t\t\t\n\t\t\t// if already one card is choosed\n\t\t\tif (m_objClickedCardParams.upperCardChoosed) {\n\t\t\t\t// remember the second card\n\t\t\t\tm_objClickedCardParams.lowerCardChoosed = true;\n\t\t\t\tm_objClickedCardParams.lowerExtId = i_objElementId.extId;\n\n\t\t\t// if no card was already choosed\n\t\t\t} else {\n\t\t\t\t// remember the first card\n\t\t\t\tm_objClickedCardParams.upperCardChoosed = true;\n\t\t\t\tm_objClickedCardParams.upperExtId = i_objElementId.extId;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn l_blnReturn;\n\t}\n\t\n\t/**\n\t * Check if there was choosen a correct pair of cards\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t */\n\tfunction checkForCorrectPair(){\n\t\t\n\t\t// if both cards are choosen\n\t\tif (m_objClickedCardParams.upperCardChoosed\t&& m_objClickedCardParams.lowerCardChoosed){\n\t\t\t\n\t\t\t// it is from the same pair\n\t\t\tif(m_arrExtIdMapping[m_objClickedCardParams.upperExtId] ==\n\t\t\t\t\t\t\t\t\t\t\t m_arrExtIdMapping[m_objClickedCardParams.lowerExtId]){\n\n\t\t\t\t// set the indicator for a correct choice\n\t\t\t\tsetChoosenIndicator(GlPairs.C_STR_CARD_BORDER_CLASS_RIGHT);\n\t\t\t}\n\t\t\t\n\t\t\t// if it is not from the same pair\n\t\t\telse {\n\t\t\t\t// set the indicator for a wrong choice\n\t\t\t\tsetChoosenIndicator(GlPairs.C_STR_CARD_BORDER_CLASS_WRONG);\n\t\t\t}\n\t\t\t\n\t\t\t// if the correct pair is choosed and the final information is activated\n\t\t\tif(m_arrExtIdMapping[m_objClickedCardParams.upperExtId] ==\n\t\t\t\t \t\t\t\t\t\t\t\tm_arrExtIdMapping[m_objClickedCardParams.lowerExtId] &&\n\t\t\t\tm_objFinalInformation[m_arrExtIdMapping[m_objClickedCardParams.upperExtId]].isActive){\n\t\t\t\t\n\t\t\t\t// show the final information for this pair, after the card is turn around\n\t\t\t\twindow.setTimeout( function(){\n\t\t\t\t\t\tshowFinalInformation(m_objFinalInformation[m_arrExtIdMapping[m_objClickedCardParams.upperExtId]]);},\n\t\t\t\t\t  \tm_intTurnDuration );\n\t\t\t\n\t\t\t// if final information is not activated or the wrong pairs is choosed\n\t\t\t} else {\n\t\t\t\t// create a transparent overlay div, where the user can cklick on it\n\t\t\t\t// for going on. The click event will transferred to the method\n\t\t\t\t// onMouseClickOverlayPairFinished()\n\t\t\t\t// this overlay will be created with some delay, after the turn of the cards is finished\n\t\t\t\t// if the user click to fast on this overlay while the turn is not over\n\t\t\t\t// we cannot calculate the location of the card properly for the animation\n\t\t\t\twindow.setTimeout( function(){setClickableOverlayDiv('onMouseClickOverlayPairFinished');},\n\t\t\t\t\t\t  \tm_intTurnDuration );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Show the final information of a correct pair.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param\tobject\ti_objFIData\tObject with the data of the final information.\n\t * \t\t\t\t\tisActive: \ttrue if final information is activated\n\t * \t\t\t\t\tcontent:\tThe content of the final information\n\t * \t\t\t\t\twidth:\t\tThe width of the final information\n\t * \t\t\t\t\theight:\t\tThe height of the final information\n\t * \t\t\t\t\tpicwidth:\tThe width of the picture(s)\n\t * \t\t\t\t\tpicheight:\tThe height of the picture(s)\n\t * @param \tboolean\ti_blnForTestMode\tTrue, if this is for the test mode\n\t */\n\tfunction showFinalInformation(i_objFIData, i_blnForTestMode){\n\t\t\n\t\t// if i_blnForTestMode is omited then false\n\t\t/**\n\t\t * @default false\n\t\t */\n\t\ti_blnForTestMode = typeof i_blnForTestMode == 'undefined' ? false : i_blnForTestMode;\n\n\t\t// the html content of the final information\n\t\tvar l_strContent = '';\n\t\t// the modal dialog box\n\t\tvar $l_objModalBox = null;\n\t\t\n\t\t// build the final information html content for the modal window \n\t\tl_strContent = getModalHtmlElementFinalInformation(\n\t\t\t\t\t\t    i_objFIData.content, \n\t\t\t\t\t\t\tgetSelectedPictureHtmlContent(i_objFIData),\n\t\t\t\t\t\t\ti_objFIData.height,\n\t\t\t\t\t\t\ti_objFIData.width);\n\t\t\n\t\t// create the dialog with the final information message\n\t\t$l_objModalBox = jQuery(l_strContent).modal({show: false});\n\t\t\n\t\t// if the dialog box is closed, then start the animation of the cards\n\t\t// to move them on the heap\n\t\t$l_objModalBox.on('hidden.bs.modal', function(){\n\t\t\t// if we are not in test mode\n\t\t\tif (!i_blnForTestMode){\n\t\t\t\t// do the after pair processing\n\t\t\t\tafterPairProcessing();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// finally show the modal window\n\t\t$l_objModalBox.modal('show');\n\t}\n\t\t\n\t/**\n\t * Returns the HTML content of the curently choosen pictures.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param\tobject\ti_objFIData\tObject with the data of the final information.\n\t * \t\t\t\t\tisActive: \ttrue if final information is activated\n\t * \t\t\t\t\tcontent:\tThe content of the final information\n\t * \t\t\t\t\twidth:\t\tThe width of the final information\n\t * \t\t\t\t\theight:\t\tThe height of the final information\n\t * \t\t\t\t\tpicwidth:\tThe width of the picture(s)\n\t * \t\t\t\t\tpicheight:\tThe height of the picture(s)\n\t * @return\tstring\tThe HTML content of the pictures.\n\t */\n\tfunction getSelectedPictureHtmlContent(i_objFIData){\n\t\t\n\t\t// the picture element\n\t\tvar $l_objPictureElement = null;\n\t\t// the returning HTML content\n\t\tvar l_strHtmlContent = '';\n\t\t// the area of the card\n\t\tvar l_strArea = '';\n\t\t\n\t\t// we are in text only mode\n\t\tif( m_intPairsType == GlPairs.C_INT_PAIRS_TYPE_TextOnly ){\n\t\t\t// there is no picture content\n\t\t\treturn l_strHtmlContent;\n\t\t}\n\t\t\n\t\t// for the first card it is always the upper area\n\t\tl_strArea = GlPairs.C_STR_AREA_UPPER;\n\n\t\t// try to get the first card \n\t\t$l_objPictureElement = jQuery(getIdFromExtId(m_objClickedCardParams.upperExtId,\n\t\t\t\t\t\t\t\t\t\t\t\t\tl_strArea,\n\t\t\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_FRONT_CARD));\n\n\t\t// if there is a picture found\n\t\tif($l_objPictureElement.length == 1 && $l_objPictureElement.prop(\"nodeName\") == \"IMG\"){\n\t\t\t// get the HTML content\n\t\t\tl_strHtmlContent = getPictureHtmlContent($l_objPictureElement, i_objFIData);\n\t\t}\n\t\t\n\t\t// if the pairs type is same picture\n\t\tif( m_intPairsType == GlPairs.C_INT_PAIRS_TYPE_SamePic ){\n\t\t\t// we need only one\n\t\t\treturn l_strHtmlContent;\n\t\t}\n\t\t\n\t\t// try to get the second card \n\t\t$l_objPictureElement = jQuery(getIdFromExtId(m_objClickedCardParams.lowerExtId,\n\t\t\t\t\t\t\t\t\t\t\t\t\tgetCorrespondingArea(l_strArea),\n\t\t\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_FRONT_CARD));\n\t\t\n\t\t// if there is a picture found\n\t\tif($l_objPictureElement.length == 1 && $l_objPictureElement.prop(\"nodeName\") == \"IMG\"){\n\t\t\t// get the HTML content\n\t\t\tl_strHtmlContent += getPictureHtmlContent($l_objPictureElement, i_objFIData);\n\t\t}\n\t\t\n\t\treturn l_strHtmlContent;\n\t}\n\n\t\n\t/**\n\t * Returns the HTML content of a given picture.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param\tobject\t$i_objPicture\tThe jQuery element of the picture.\n\t * @param\tobject\ti_objFIData\tObject with the data of the final information.\n\t * \t\t\t\t\tisActive: \ttrue if final information is activated\n\t * \t\t\t\t\tcontent:\tThe content of the final information\n\t * \t\t\t\t\twidth:\t\tThe width of the final information\n\t * \t\t\t\t\theight:\t\tThe height of the final information\n\t * \t\t\t\t\tpicwidth:\tThe width of the picture(s)\n\t * \t\t\t\t\tpicheight:\tThe height of the picture(s)\n\t * @return\tstring\tThe HTML content of the pictures.\n\t */\n\tfunction getPictureHtmlContent($i_objPicture, i_objFIData){\n\t\t// the new picture element\n\t\tvar $l_objPictureElementNew = null;\n\n\t\t// clone the picture \n\t\t$l_objPictureElementNew = $i_objPicture.clone();\n\t\t// and remove not necessary attributes\n\t\t$l_objPictureElementNew.css(\"border-width\", \"0px\");\n\t\t$l_objPictureElementNew.removeClass(\"glpairs_cls_card_border_right\");\n\t\t$l_objPictureElementNew.attr(\"id\", \"\");\n\t\t// set the padding value\n\t\t$l_objPictureElementNew.css(\"padding\", \"10px\");\n\t\t\n\t\t// if no width is given\n\t\tif (i_objFIData.picwidth === 0) {\n\t\t\t$l_objPictureElementNew.css(\"width\", \"\");\n\t\t} else {\n\t\t\t$l_objPictureElementNew.css(\"width\", i_objFIData.picwidth);\n\t\t}\n\t\t\n\t\t// if no heigth is given\n\t\tif (i_objFIData.picheight === 0) {\n\t\t\t$l_objPictureElementNew.css(\"height\", \"\");\n\t\t} else {\n\t\t\t$l_objPictureElementNew.css(\"height\", i_objFIData.picheight);\n\t\t}\n\t\t\n\t\t// return the HTML content\n\t\treturn $l_objPictureElementNew.prop(\"outerHTML\");\n\t}\n\t\n\t/**\n\t * Set indocator if the pair which is choosen is a correct or a wrong pair\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param\tstring\ti_strNewClass\tThe new class which should indicate this state\n\t */\n\tfunction setChoosenIndicator(i_strNewClass){\t\n\t\t\n\t\t// the current HTML element\n\t\tvar $l_currentElement = null;\n\t\t// the area of the current HTML element\n\t\tvar l_strCurrentArea = '';\n\t\t\n\t\t// for the first card it is always the upper area\n\t\tl_strCurrentArea = GlPairs.C_STR_AREA_UPPER;\n\t\t\n\t\t// get the first card\n\t\t$l_currentElement = jQuery(getIdFromExtId(m_objClickedCardParams.upperExtId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tl_strCurrentArea,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_FRONT_CARD));\n\n\t\t// change with an blinking border to the new class \n\t\tblinkBorder($l_currentElement, i_strNewClass);\t\n\t\t\n\t\t// get the second card\n\t\t$l_currentElement = jQuery(getIdFromExtId(m_objClickedCardParams.lowerExtId,\n\t\t\t\t\t\t\t\t\t\t\t\t  getCorrespondingArea(l_strCurrentArea),\n\t\t\t\t\t\t\t\t\t\t\t\t  GlPairs.C_STR_ID_SUFFIX_FRONT_CARD));\n\t\t\n\t\t// change with an blinking border to the new class\n\t\tblinkBorder($l_currentElement, i_strNewClass);\t\n\t}\n\t\n\t\n\t/**\n\t * Build the ID of e HTML element from the external Id.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param\tinteger\ti_intExtId\tthe external ID\n\t * @param\tstring\ti_strArea\tThe area. Upper or lower area is possible.\n\t * @param\tstring\ti_strSuffix\tThe suffix of the ID.\n\t * @return\tstring\t\t\t\tThe ID of the HTML element.\n\t */\n\tfunction getIdFromExtId(i_intExtId, i_strArea, i_strSuffix){\t\n\t\treturn '#' + m_strPairsId + '_' + i_intExtId + '_' +  i_strArea + '_' + i_strSuffix;\n\t}\n\n\t/**\n\t * Build the ID of e HTML element from the external Id.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param\t{object}\t$i_obj_card\t\t\tThe jQuery object of the card\n\t * @param\tstring\t\ti_strTargetClass\tThe target class after the border has blinked.\n\t */\n\tfunction blinkBorder($i_obj_card, i_strTargetClass){\n\t\t\n\t\t\n\t\t// if the counter is still not created\n\t\tif (typeof(blinkBorder.counter) == 'undefined'){\n\t\t\t// create it\n\t\t\tblinkBorder.counter = [];\n\t\t}\n\t\t\n\t\t// if the element in the counter array is not set\n\t\tif (typeof(blinkBorder.counter[$i_obj_card.attr('id')]) == 'undefined'){\n\t\t\tblinkBorder.counter[$i_obj_card.attr('id')] = 0;\n\t\t}\n\n\t\t// for the first time \n\t\tif(blinkBorder.counter[$i_obj_card.attr('id')] === 0){\n\t\t\tblinkBorder.counter[$i_obj_card.attr('id')]++;\n\t\t\t// we need to wait n miliseconds without changings\n\t\t\t// because we need to wait for the turn of the card\n\t\t\twindow.setTimeout(function(){blinkBorder($i_obj_card, i_strTargetClass);}, m_intTurnDuration);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// after the 4th blink \n\t\tif(blinkBorder.counter[$i_obj_card.attr('id')]++ == 4){\n\t\t\t// initialize all static variables\n\t\t\tblinkBorder.counter[$i_obj_card.attr('id')] = 0;\n\t\t\t// finish the incremental loop\n\t\t\treturn;\n\t\t}\n\t\t\t\n\t\t// toggle the target and the standard class\n\t\t$i_obj_card.toggleClass(GlPairs.C_STR_CARD_BORDER_CLASS_DEFAULT);\n\t\t$i_obj_card.toggleClass(i_strTargetClass);\n\t\t\n\t\t// after a timeout of 200 milliseconds toggle the classes again\n\t\twindow.setTimeout(function(){blinkBorder($i_obj_card, i_strTargetClass);}, 200);\t\n\t}\n\n\t/**\n\t * Set a div element over the whole game, for catching a click event.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param\tstring\t\ti_strEventHandler\tHandler method for the click event.\n\t */\n\tfunction setClickableOverlayDiv(i_strEventHandler){\n\t\t// the main div element\n\t\tvar $l_objMainDiv = null;\n\t\t// the overlay div\n\t\tvar $l_objOverlayDiv = null;\n\t\t// ID of the main div element\n\t\tvar l_strMainDivId = '';\n\t\t\n\t\t// create the ID of the main div element\n\t\tl_strMainDivId = getMainDivId();\n\t\t\n\t\t// get the main div element itself\n\t\t$l_objMainDiv = jQuery(l_strMainDivId);\n\t\t\n\t\t$l_objOverlayDiv = jQuery('<div/>', {\n\t\t\t\tid: m_strPairsId + '_' + 'overlay',\n\t\t\t\tstyle: \t\t'width: ' + $l_objMainDiv.width() + 'px;' +\n\t\t\t\t\t\t \t'height: ' + $l_objMainDiv.height() + 'px;' +\n\t\t\t\t\t\t\t'top: ' + $l_objMainDiv.position().top + 'px;' +\n\t\t\t\t\t\t\t'left: ' + $l_objMainDiv.position().left + 'px;' +\n\t\t\t\t\t\t\t'opacity: 1;' +\n\t\t\t\t\t\t    'position: absolute;'\n\t\t\t});\n\t\t\n\t\t// append the overlay\n\t\t$l_objMainDiv.append($l_objOverlayDiv);\n\t\t\n\t\t// register the mouse click event\n\t\t$l_objOverlayDiv.click(\n\t\t\tfunction(i_objEvent){\n\t\t\t\t// call the event handler which delegates the request to the actual handler\n\t\t\t\tGlPairs.glpairsEventHandler(m_strPairsId, i_objEvent, i_strEventHandler, $l_objOverlayDiv);\n\t\t\t}\n\t\t);\n\t\t\n\t\t// if the automatic click is not deactivated\n\t\tif (m_intTurnbackDelay !== 0){\n\t\t\t// click on the everlay after n seconds automatically\n\t\t\tm_TimeoutOverlayClick = window.setTimeout(function(){$l_objOverlayDiv.trigger('click');}, m_intTurnbackDelay);\n\t\t}\n\t\t\n\t\t// if the click hint is not deactivated\n\t\tif (m_intClickHintDelay !== 0){\n\t\t\tm_TimeoutClickHint = window.setTimeout(function(){showAnimatedClickHint();},m_intClickHintDelay);\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Turns the both choosen cards back again.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t */\n\tfunction turnBackCards(){\n\t\t// element with the border of the card\n\t\tvar $l_objBorderElement = null;\n\t\t// the area of the card\n\t\tvar l_strArea = '';\n\t\t// the class of the current border of the choosen cards\n\t\tvar l_strCurrentBorderClass = '';\n\t\t\n\t\t// if the correct pair was choosen\n\t\tif(m_arrExtIdMapping[m_objClickedCardParams.upperExtId] ==\n\t\t\t\t\t\t\t\t\t\t m_arrExtIdMapping[m_objClickedCardParams.lowerExtId]){\n\t\t\t// the current border class is right\n\t\t\tl_strCurrentBorderClass = GlPairs.C_STR_CARD_BORDER_CLASS_RIGHT;\n\t\t}\n\t\telse{\n\t\t\t// the current border class is wrong\n\t\t\tl_strCurrentBorderClass = GlPairs.C_STR_CARD_BORDER_CLASS_WRONG;\n\t\t}\n\n\t\t// for the first card it is always the upper area\n\t\tl_strArea = GlPairs.C_STR_AREA_UPPER;\n\t\t\n\t\t// flip over the first card\n\t\tflipOverCard(m_objClickedCardParams.upperExtId, l_strArea ); \n\n\t\t// get the border element of the first card \n\t\t$l_objBorderElement = jQuery(getIdFromExtId(m_objClickedCardParams.upperExtId,\n\t\t\t\t\t\t\t\t\t\t\t\t\tl_strArea,\n\t\t\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_FRONT_CARD));\n\t\t// and toggle the card back to the default border class\n\t\t$l_objBorderElement.toggleClass(GlPairs.C_STR_CARD_BORDER_CLASS_DEFAULT);\n\t\t$l_objBorderElement.toggleClass(l_strCurrentBorderClass);\n\t\t\n\t\t// flip over the second card\n\t\tflipOverCard(m_objClickedCardParams.lowerExtId, getCorrespondingArea(l_strArea)); \n\n\t\t// get the border element of the second card \n\t\t$l_objBorderElement = jQuery(getIdFromExtId(m_objClickedCardParams.lowerExtId,\n\t\t\t\t\t\t\t\t\t\t\t\t\tgetCorrespondingArea(l_strArea),\n\t\t\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_FRONT_CARD));\n\t\t// and toggle the card back to the default border class\n\t\t$l_objBorderElement.toggleClass(GlPairs.C_STR_CARD_BORDER_CLASS_DEFAULT);\n\t\t$l_objBorderElement.toggleClass(l_strCurrentBorderClass);\n\t}\n\t\n\t/**\n\t * Adds the givven value to the result of the pairs game\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param\tinteger\ti_intValue\tThe value which should be added to the result.\n\t */\n\tfunction setResultOfGame(i_intValue){\n\t\t\n\t\t// the jQuery object with the result div element\n\t\tvar $l_objResult = null;\n\t\t// the ID of the result div element\n\t\tvar l_strResultID = '';\n\t\t// the current value of the result\n\t\tvar l_intCurrentValue = 0;\n\t\t\n\t\t// create the ID of the result div element\n\t\tl_strResultID = '#' + m_strPairsId + '_' + GlPairs.C_STR_ID_SUFFIX_RESULT;\n\t\t\n\t\t// get the element\n\t\t$l_objResult = jQuery(l_strResultID);\n\t\t\n\t\t// get the current value\n\t\tl_intCurrentValue = parseInt($l_objResult.text());\n\t\t\n\t\t// add the new value to the current value\n\t\tl_intCurrentValue += i_intValue;\n\t\t\n\t\t// write it back into the DOM\n\t\t$l_objResult.text(l_intCurrentValue);\n\t\t\n\t\tif(i_intValue < 0){\n\t\t\t// toggle a red background for 1 second\n\t\t\t$l_objResult.toggleClass('glpairs_cls_result_negative');\n\t\t\twindow.setTimeout(function(){$l_objResult.toggleClass('glpairs_cls_result_negative');}, 1000);\n\t\t}\n\t\telse{\n\t\t\t// toggle a green background for 1 second\n\t\t\t$l_objResult.toggleClass('glpairs_cls_result_positive');\n\t\t\twindow.setTimeout(function(){$l_objResult.toggleClass('glpairs_cls_result_positive');}, 1000);\n\t\t}\n\t}\n\n\t/**\n\t * Get the result of the game.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t */\n\tfunction getResultOfGame(){\n\t\t\n\t\t// the jQuery object with the result div element\n\t\tvar $l_objResult = null;\n\t\t// the ID of the result div element\n\t\tvar l_strResultID = '';\n\t\t// the current value of the result\n\t\tvar l_intCurrentValue = 0;\n\t\t\n\t\t// create the ID of the result div element\n\t\tl_strResultID = '#' + m_strPairsId + '_' + GlPairs.C_STR_ID_SUFFIX_RESULT;\n\t\t\n\t\t// get the element\n\t\t$l_objResult = jQuery(l_strResultID);\n\t\t\n\t\t// get the current value\n\t\tl_intCurrentValue = parseInt($l_objResult.text());\n\t\t\n\t\t// return the value\n\t\treturn l_intCurrentValue;\n\t}\n\n\t/**\n\t * Initialize the global attribute m_objClickedCardParams with the currently choosed cards\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t */\n\tfunction initializeClickedCardParams(){\n\t\tm_objClickedCardParams.upperCardChoosed = false;\n\t\tm_objClickedCardParams.lowerCardChoosed = false;\n\t\tm_objClickedCardParams.upperExtId = 0;\n\t\tm_objClickedCardParams.lowerExtId = 0;\n\t}\n\t\n\t/**\n\t * Move one cards to the stack, so that the could not choosed again.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param {object}\t$i_objCard\tjQuery object with the card element, which should be animated.\n\t * @param integer\ti_intExtId\tThe external ID of the card.\n\t * @param string\ti_strArea\tThe area of the card\n\t */\n\tfunction animateCard2Stack($i_objCard){\n\t\t// the place with the card stack\n\t\tvar $l_objCardStack = null;\n\t\t// the offset from the top\n\t\tvar l_intOffsetTop = 0;\n\t\t// the offset from the left\n\t\tvar l_intOffsetLeft = 0;\n\t\t// random offset for the animation\n\t\tvar l_fltRandomOffsetTop = 0;\n\t\tvar l_fltRandomOffsetLeft = 0;\n\t\t\n\t\tvar l_intCardstackOffset = 0;\n\t\tvar l_intCardOffset = 0;\n\n\t\t\n\t\t// get the card stack\n\t\t$l_objCardStack = jQuery('#' + m_strPairsId + '_' + GlPairs.C_STR_ID_SUFFIX_CARD_STACK);\n\t\t\n\t\t// get random values for the offset\n\t\tl_fltRandomOffsetTop = getRandomNumber4Animation();\n\t\tl_fltRandomOffsetLeft = getRandomNumber4Animation();\n\t\t\n\t\t// compute top offset\n\t\tl_intCardstackOffset = $l_objCardStack.offset().top;\n\t\tl_intCardOffset = $i_objCard.offset().top;\n\t\tl_intOffsetTop = l_intCardstackOffset - l_intCardOffset + l_fltRandomOffsetTop;\n\t\t\n\t\t// compute left offset\n\t\tl_intCardstackOffset = $l_objCardStack.offset().left;\n\t\tl_intCardOffset = $i_objCard.offset().left;\n\t\tl_intOffsetLeft = l_intCardstackOffset - l_intCardOffset + l_fltRandomOffsetLeft;\n\t\t\n\t\t// change position to relative, otherwise the animation has no effect\n\t\t$i_objCard.css('position', 'relative');\n\t\t// remove the classes with the HTML5 parameters\n\t\t// this is disturbing the animation\n\t\t$i_objCard.removeClass('glpairs_cls_card_visible');\n\t\t$i_objCard.removeClass('glpairs_cls_card_common');\n\t\t$i_objCard.css('transition', '');\n\n\n\t\t// move the card to the stack\n\t\t$i_objCard.animate({ top: '+=' + l_intOffsetTop ,\n\t\t\t \t\t\t\t left: '+=' + l_intOffsetLeft \n\t\t   \t\t\t\t\t}, \n\t\t   \t\t\t\t\t{ duration: m_intMoveStackDuration,\n\t\t   \t\t\t\t\t  easing: 'linear'\n\t\t   \t\t\t\t\t});\n\t\t   \t\t\t\t\t\n\t\t\n\t\t// turn the card a little bit after the animation\n\t\twindow.setTimeout(function(){turnCard($i_objCard);}, m_intMoveStackDuration / 2);\n\t}\n\t\n\t/**\n\t * Turn the card randomly a little bit\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param {object}\t$i_objCard\tjQuery object with the card element, which should be turned.\n\t */\n\tfunction turnCard($i_objCard){\t\n\t\t\n\t\t// the random degrees of the the turn\n\t\tvar l_fltDegrees = 0;\n\t\t\n\t\t// first get a random number between 0 and 1\n\t\tl_fltDegrees = Math.random();\n\t\t// transform it to a number between -1000 and 1000\n\t\tl_fltDegrees = Math.round(l_fltDegrees * 2000 - 1000);\n\t\t// and now transform it to a number between -10 and 10 with two digits after the point\n\t\tl_fltDegrees = l_fltDegrees / 100;\n\t\t\n\t\t$i_objCard.css('transform', 'rotateZ( ' + l_fltDegrees + 'deg )');\n\t\t$i_objCard.css('-ms-transform', 'rotateZ( ' + l_fltDegrees + 'deg )');\n\t\t$i_objCard.css('-moz-transform', 'rotateZ( ' + l_fltDegrees + 'deg )');\n\t\t$i_objCard.css('-webkit-transform', 'rotateZ( ' + l_fltDegrees + 'deg )');\n\t\t$i_objCard.css('-o-transform', 'rotateZ( ' + l_fltDegrees + 'deg )');\n\t}\n\t\n\t/**\n\t * Turn the card randomly a little bit\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t */\n\tfunction gameFinishedDialog(){\n\t\t// the dialof string formated\n\t\tvar l_strDialog = '';\n\t\t\n\t\tl_strDialog = m_objI18n.gameFinished;\n\t\t\n\t\tl_strDialog = l_strDialog.replace('&1', getResultOfGame()); \n\t\t\n\t\t// start a dialog with the finished message\n\t\tjQuery(getModalHtmlElement(l_strDialog)).modal();\n\t}\n\n\t/**\n\t * Returns a Random Offset for the animation\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @return number\n\t */\n\tfunction getRandomNumber4Animation(){\n\t\t// the random number\n\t\tvar l_fltRandom = 0;\n\t\t\n\t\t// comute a random offset between 10 and 20\n\t\tl_fltRandom = Math.random();\n\t\tl_fltRandom = Math.round(l_fltRandom * 10 + 10);\n\t\treturn l_fltRandom;\n\t}\n\t\n\t/**\n\t * Show an animated hint for doing a click an the pairs game. After the user\n\t * has choosed two cards he need to click on the game for going on.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t */\n\tfunction showAnimatedClickHint(){\n\t\t// the main div element\n\t\tvar $l_objMainDiv = null;\n\t\t// the dialog itself\n\t\tvar $l_objDialog = null;\n\t\t// the left property of the div element\n\t\tvar l_intLeft = 0;\n\t\t// the duration of the animation in milliseconds\n\t\tvar l_intDuration = 0;\n\n\t\t// get the main div element itself\n\t\t$l_objMainDiv = jQuery(getMainDivId());\n\t\t\n\t\t// create the dialog with the click hint\n\t\t$l_objDialog = jQuery(\"<div />\",{\n\t\t\t\tid:\t\tm_strPairsId + '_' + GlPairs.C_STR_ID_SUFFIX_CLICK_HINT,\n\t\t\t\t'class':\t'glpairs_cls_click_hint',\n\t\t\t\tstyle:\t'top: ' + ($l_objMainDiv.height() + $l_objMainDiv.position().top) + 'px; '\n\t\t\t});\n\t\t$l_objDialog.html(m_objI18n.clickHint);\n\t\t\n\t\t// append the new element\n\t\t$l_objMainDiv.append($l_objDialog);\n\t\t\n\t\t// now with the content we know the width of the div element\n\t\t// and we can caculate the left property\n\t\tl_intLeft = $l_objMainDiv.width() - $l_objDialog.width();\n\t\tif (l_intLeft < 0) {\n\t\t\tl_intLeft = 0;\n\t\t}\n\t\tl_intLeft = Math.round(l_intLeft / 2);\n\t\t\n\t\t// set the left property\n\t\t$l_objDialog.css('left', l_intLeft);\n\t\t\n\t\t// caculate the duration\n\t\tl_intDuration = $l_objMainDiv.height() * 10;\n\t\t\n\t\t$l_objDialog.animate(\n\t\t\t\t{ top: '-=' + $l_objMainDiv.height() },\n\t\t\t\tl_intDuration,\n\t\t\t\t'linear'\n\t\t\t).animate(\n\t\t\t\t{ opacity: 0 },\n\t\t\t\t500,\n\t\t\t\tfunction(){\n\t\t\t\t\t// after the animation is finished\n\t\t\t\t\t// we need to remove the div element again\n\t\t\t\t\t$l_objDialog.remove(); }\n\t\t\t);\n\t}\n\n\t/**\n\t * unregister the click event if two correct cards are choosed\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t */\n\tfunction unregisterEventsConditional(){\n\t\t\n\t\t// a card element\n\t\tvar $l_objCardElement = null;\n\t\t// id of the div element of a card\n\t\tvar l_strCardDivId = '';\n\t\t// the area of the card\n\t\tvar l_strArea = '';\n\t\t\n\t\t// if both cards are choosen\n\t\t// and it is from the same pair\n\t\tif (m_objClickedCardParams.upperCardChoosed\t&& m_objClickedCardParams.lowerCardChoosed &&\n\t\t\tm_arrExtIdMapping[m_objClickedCardParams.upperExtId] ==\n\t\t\t\t\t\t\t\t\t\t\t m_arrExtIdMapping[m_objClickedCardParams.lowerExtId]){\n\n\t\t\t// for the first card it is always the upper area\n\t\t\tl_strArea = GlPairs.C_STR_AREA_UPPER;\n\t\t\t\n\t\t\t// build the ID of the cardelement\n\t\t\tl_strCardDivId = getIdFromExtId(m_objClickedCardParams.upperExtId, \n\t\t\t\t\t\t\t\t\t\t\tl_strArea, \n\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_CARD_OVERALL);\n\t\t\t\n\t\t\t// get the div element with the ID\n\t\t\t$l_objCardElement = jQuery(l_strCardDivId);\n\t\t\t\n\t\t\t// unregister the click event\n\t\t\t$l_objCardElement.unbind('click');\n\t\t\t// set the cursor back to the default value\n\t\t\t$l_objCardElement.css('cursor', 'auto');\n\n\t\t\t// build the ID of the second card\n\t\t\tl_strCardDivId = getIdFromExtId(m_objClickedCardParams.lowerExtId, \n\t\t\t\t\t\t\t\t\t\t\tgetCorrespondingArea(l_strArea), \n\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_CARD_OVERALL);\n\t\t\t\n\t\t\t// get the div element with the ID\n\t\t\t$l_objCardElement = jQuery(l_strCardDivId);\n\t\t\t\n\t\t\t// unregister the click event\n\t\t\t$l_objCardElement.unbind('click');\n\t\t\t// set the cursor back to the default value\n\t\t\t$l_objCardElement.css('cursor', 'auto');\n\t\t}\n\t}\n\t\n\t/**\n\t * Register the events for the end of the turn back transition.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t */\n\tfunction setTurnBackEvents() {\n\t\t\n\t\t// the jQuery object with the first back of the card\n\t\tvar $l_objCardBackFirst = null;\n\t\t// the jQuery object with the second back of the card\n\t\tvar $l_objCardBackSecond = null;\n\t\t// the area of the card\n\t\tvar l_strArea = '';\n\n\t\t// for the first card it is always the upper area\n\t\tl_strArea = GlPairs.C_STR_AREA_UPPER;\n\n\t\t// get the back of the first card\n\t\t$l_objCardBackFirst = jQuery(getIdFromExtId(m_objClickedCardParams.upperExtId,\n\t\t\t\t\t\t\t\t\t\t\t   l_strArea,\n\t\t\t\t\t\t\t\t\t\t\t   GlPairs.C_STR_ID_SUFFIX_BACK));\n\t\t\n\t\t// register the end event of the turn transition of the back card\n\t\t$l_objCardBackFirst.on(\n\t\t\t'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd',\n\t\t\t function(i_objEvent){\n\t\t\t\t// call the event handler which delegates the request to the actual handler\n\t\t\t\tGlPairs.glpairsEventHandler(m_strPairsId, i_objEvent, 'onTurnBackCardEnd', $l_objCardBackFirst);\n\t\t\t });\n\t\t\n\t\t// get the back of the second card\n\t\t$l_objCardBackSecond = jQuery(getIdFromExtId(m_objClickedCardParams.lowerExtId,\n\t\t\t\t\t\t\t\t\t\t\t   \t\t getCorrespondingArea(l_strArea),\n\t\t\t\t\t\t\t\t\t\t\t   \t\t GlPairs.C_STR_ID_SUFFIX_BACK));\n\t\t\n\t\t// register the end event of the turn transition of the back card\n\t\t$l_objCardBackSecond.on(\n\t\t\t'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd',\n\t\t\t function(i_objEvent){\n\t\t\t\t// call the event handler which delegates the request to the actual handler\n\t\t\t\tGlPairs.glpairsEventHandler(m_strPairsId, i_objEvent, 'onTurnBackCardEnd', $l_objCardBackSecond);\n\t\t\t });\n\t}\n\t\n\t/**\n\t * Turn all cards for the test mode\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t */\n\tfunction performTestMode() {\n\t\t// the ID of the main div element container for this pairs game\n\t\tvar l_strMainDivId = '';\n\t\t// array with all element IDs for the cards\n\t\tvar l_arrCardIds = [];\n\t\t\n\t\tl_strMainDivId = getMainDivId();\n\t\t\n\t\t// select all elements of this pairs container and filter\n\t\t// for all overall container elements of the cards\n\t\tjQuery(l_strMainDivId).find(\".glpairs_cls_click_content\").each(\n\t\t\tfunction(i_intIndex){\n\t\t\t\t// array with the content element uID and the internal ID\n\t\t\t\tvar l_objElementId = {};\n\t\t\t\t// the current anchor element\n\t\t\t\tvar $l_objCurrentCardContainer = jQuery(this);\n\n\t\t\t\t// get the elements of the ID of this card\n\t\t\t\tl_objElementId = getIdArrayFromId($l_objCurrentCardContainer.attr('id'));\n\t\t\t\t\n\t\t\t\t// push this element to the array\n\t\t\t\tl_arrCardIds.push(l_objElementId);\n\t\t\t}\n\t\t);\n\t\t\n\t\t// turn all cards from the array\n\t\tturnAllCards(l_arrCardIds);\n\t}\n\n\t/**\n\t * Turn all cards from the given card id array with a certain delay between every card\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t *\n\t * @param array\ti_arrCardIds\tArray with all IDs of the cards\t\n\t */\n\tfunction turnAllCards(i_arrCardIds) {\n\n\t\t// array with the content element uID and the internal ID\n\t\t// pairsId:\tID for the content element of the whole pairs game\n\t\t// extId:\t\tinternal Id of the card\n\t\t// area:\t\tweather we are in the lower or upper area\n\t\t// suffix:\t\tthe suffix of the ID\n\t\tvar l_objElementId = {};\n\t\t\n\t\t// exit condition, if the lenght of the array is 0\n\t\tif (i_arrCardIds.length === 0) {\n\t\t\t\n\t\t\t// show the test mode hint\n\t\t\tjQuery(getModalHtmlElement(m_objI18n.testmode)).modal();\n\t\t\t\n\t\t\t// exit the function\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// get the first element and cut it from the array\n\t\tl_objElementId = i_arrCardIds.shift();\n\t\t\n\t\t// flip over the card\n\t\tflipOverCard(l_objElementId.extId, l_objElementId.area ); \n\n\t\t// after a timeout turn the next card\n\t\twindow.setTimeout( function(){turnAllCards(i_arrCardIds);}, \n\t\t\t\tm_intTestModeTurnDelay );\n\t}\n\t\n\t/**\n\t * Initialize some global properties of the pairs game\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t *\n\t */\n\tfunction initializeGlobals() {\n\t\t// build the global status object for all cards in the game\n\t\t// initialy thy all in the state backside\n\t\tfor (var l_intExtId in m_arrExtIdMapping) {\n\t\t\tif(m_arrExtIdMapping.hasOwnProperty(l_intExtId)){\n\t\t\t\tm_objCardTurnState[l_intExtId] = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Turn a card to the frontside or vice versa\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t *\n\t * @param integer\ti_intExtId\tExternal ID of the card\n\t * @param string\ti_strArea\tArea of the card (upper or lower)\t\n\t */\n\tfunction flipOverCard(i_intExtId, i_strArea ) {\n\t\t\n\t\t// the jQuery object of the frontside\n\t\tvar $l_objFrontside = null;\n\t\t// the ID of the frontside card\n\t\tvar l_strCardDivId = ''; \n\t\t\n\t\t// build the ID of the cardelement\n\t\tl_strCardDivId = getIdFromExtId(i_intExtId, i_strArea, GlPairs.C_STR_ID_SUFFIX_FRONT);\n\t\t// get the div element with the ID\n\t\t$l_objFrontside = jQuery(l_strCardDivId);\n\t\t\n\t\t\n\t\t// if the frontside is currently shown\n\t\tif (m_objCardTurnState[i_intExtId]){\n\n\t\t\t// toggle the class from invisible to visible for the backside\n\t\t\ttoggleClassOfCardElement(i_intExtId, i_strArea, GlPairs.C_STR_ID_SUFFIX_BACK, true);\n\t\t\t// toggle the class from visible to invisible for the frontside\n\t\t\ttoggleClassOfCardElement(i_intExtId, i_strArea, GlPairs.C_STR_ID_SUFFIX_FRONT, false);\n\n\t\t\t// make the frontside invisible\n\t\t\t$l_objFrontside.css('opacity', '0.0');\n\t\t\t$l_objFrontside.css('visibility', 'hidden');\n\n\t\t\t// set the flag for this card to backside is visible\n\t\t\tm_objCardTurnState[i_intExtId] = false;\n\t\t\n\t\t// if the backside is currently shown\n\t\t} else {\n\n\t\t\t// make the frontside visible\n\t\t\t$l_objFrontside.css('opacity', '1.0');\n\t\t\t$l_objFrontside.css('visibility', 'visible');\n\n\t\t\t// toggle the class from visible to invisible for the backside\n\t\t\ttoggleClassOfCardElement(i_intExtId, i_strArea, GlPairs.C_STR_ID_SUFFIX_BACK, false);\n\t\t\t// toggle the class from invisible to visible for the frontside\n\t\t\ttoggleClassOfCardElement(i_intExtId, i_strArea, GlPairs.C_STR_ID_SUFFIX_FRONT, true);\n\t\t\t\n\t\t\t// set the flag for this card to frontside is visible\n\t\t\tm_objCardTurnState[i_intExtId] = true;\n\t\t}\n\t}\n\t\n\t/**\n\t * Process all necessary things after the second pair is choosed.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t */\n\tfunction afterPairProcessing() {\n\n\t\t// if the correct pair was choosed\n\t\tif(m_arrExtIdMapping[m_objClickedCardParams.upperExtId] == \n\t\t\t\t\t\t\t\t\t\t\tm_arrExtIdMapping[m_objClickedCardParams.lowerExtId]){\n\t\t\t// add n plus points\n\t\t\tsetResultOfGame(m_intPointsPlus);\n\t\t\t\n\t\t\t// register the events for the end of the turn back transition \n\t\t\t// if this event is triggered the card getting moved to the card stack\n\t\t\tsetTurnBackEvents();\n\t\t\t\n\t\t\t// decrease the pairs count\n\t\t\tm_intPairsCount -= 1;\n\t\t}\n\t\t\n\t\t// if the wrong pair is choosen\n\t\telse{\n\t\t\t// set n negative point\n\t\t\tsetResultOfGame(-1 * m_intPointsMinus);\n\t\t}\n\t\t\t\t\n\t\t// turn the both choosen cards back again\n\t\tturnBackCards();\n\t\t\n\t\t// initialize the global atttribute with the currently chosed cards\n\t\tinitializeClickedCardParams();\n\t\t\n\t\t// if the last pair was found\n\t\tif (m_intPairsCount === 0) {\n\t\t\t// show the finish dialog after a little delay\n\t\t\twindow.setTimeout( function(){gameFinishedDialog();}, \n\t\t\t\t\t    m_intTurnDuration + m_intMoveStackDuration + 200 );\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Process all necessary things after the second pair is choosed.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param \tstring i_strExtId\tThe first extID\n\t * @returns\tstring\t\t\t\tThe second extID\n\t */\n\tfunction getCorrespondingExtId(i_strExtId) {\n\t\tvar l_intUId = 0;\n\t\t\n\t\t// get the UID of this pair\n\t\tl_intUId = m_arrExtIdMapping[i_strExtId];\n\t\t\n\t\t// if the first extID is not even the current ext ID\n\t\tif (i_strExtId != m_arrUidMapping[l_intUId][GlPairs.C_STR_ARR_ID_EXT_ID1])\n\t\t{ \n\t\t\t// the give this extID back\n\t\t\treturn m_arrUidMapping[l_intUId][GlPairs.C_STR_ARR_ID_EXT_ID1];\n\t\t\t\n\t\t// if it is the other extID\n\t\t} else {\n\t\t\t// give this back\n\t\t\treturn m_arrUidMapping[l_intUId][GlPairs.C_STR_ARR_ID_EXT_ID2];\n\t\t}\n\t}\n\t\n\t/**\n\t * Process all necessary things after the second pair is choosed.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param \tstring i_strArea\tThe first area\n\t * @returns\tstring\t\t\t\tThe other area\n\t */\n\tfunction getCorrespondingArea(i_strArea) {\n\t\t\n\t\t// if we are in split mode\n\t\tif (m_blnSplitmode){\n\t\t\t\n\t\t\t// if this is the upper area\n\t\t\tif(i_strArea == GlPairs.C_STR_AREA_UPPER){\n\t\t\t\t// return the other\n\t\t\t\treturn GlPairs.C_STR_AREA_LOWER;\n\t\t\t} else {\n\t\t\t\treturn GlPairs.C_STR_AREA_UPPER;\n\t\t\t}\n\t\t\n\t\t// if we are not in split mode\n\t\t} else {\n\t\t\t// we have always upper area\n\t\t\treturn GlPairs.C_STR_AREA_UPPER;\n\t\t}\n\t}\n\n\t/**\n\t * Process all necessary things after the second pair is choosed.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param \t{object}\ti_objElementId \tObject with four elements\n\t * \t\t\t\t\t\t\t\t\t\tpairsId:\tID for the content element of the whole pairs game\n\t * \t\t\t\t\t\t\t\t\t\textId:\t\tinternal Id of the card\n\t * \t\t\t\t\t\t\t\t\t\tarea:\t\tweather we are in the lower or upper area\n\t * \t\t\t\t\t\t\t\t\t\tsuffix:\t\tthe suffix of the ID\n\t * \n\t */\n\tfunction setCorrespondingChoosedCards(i_objElementId) {\n\t\t\n\t\t// if this is from the upper area \n\t\tif (i_objElementId.area == GlPairs.C_STR_AREA_UPPER){\n\t\t\t// set the choosed cards there\n\t\t\tm_objClickedCardParams.upperCardChoosed = true;\n\t\t\tm_objClickedCardParams.upperExtId = i_objElementId.extId;\n\t\t\t// and the corresponding cards to the other \n\t\t\tm_objClickedCardParams.lowerCardChoosed = true;\n\t\t\tm_objClickedCardParams.lowerExtId = getCorrespondingExtId(i_objElementId.extId);\n\t\t\n\t\t// if this is from the lower area\n\t\t} else {\n\t\t\t// set the choosed cards there\n\t\t\tm_objClickedCardParams.lowerCardChoosed = true;\n\t\t\tm_objClickedCardParams.lowerExtId = i_objElementId.extId;\n\t\t\t// and the corresponding cards to the other \n\t\t\tm_objClickedCardParams.upperCardChoosed = true;\n\t\t\tm_objClickedCardParams.upperExtId = getCorrespondingExtId(i_objElementId.extId);\n\t\t\t\n\t\t}\n\t}\n\t\n\t/**\n\t * Process all necessary things after the second pair is choosed.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param \t{string}\ti_strContent \tContent of the modal dialog window\n\t */\n\tfunction getModalHtmlElement(i_strContent) {\n\t\t// build modal window with text\n\t\treturn [\n\t    '<div class=\"modal fade\" tabindex=\"-1\" aria-hidden=\"true\" id=\"thulinModal\">',\n\t      '<div class=\"modal-dialog\">',\n\t        '<div class=\"modal-content\">',\n\t        \t'<div class=\"modal-body\">',\n\t        \t\t'<p>',\n\t        \t\t\ti_strContent,\n\t        \t\t'</p>',\n\t        \t'</div>',\n\t\t\t\t'<div class=\"modal-footer\">',\n\t        \t\t'<button type=\"button\" class=\"btn btn-primary\"', \n\t          \t\t\t\t'data-bs-dismiss=\"modal\">OK</button>',\n\t      \t\t'</div>',          \n\t        '</div>',\n\t      '</div>',\n\t    '</div>'  \n\t\t].join('\\n');\t\t\n\t}\n\t\n\t/**\n\t * Process all necessary things after the second pair is choosed.\n\t * \n\t * @function\n\t * @inner\n\t * @memberOf GLPairs\n\t * \n\t * @param \t{string}\ti_strContent \tContent of the modal dialog window\n\t * @param \t{string}\ti_strImages \tImage data of the modal dialog window\n\t * @param\t{integer}\ti_intHeight\t\tHeight of the modal window\n\t * @param\t{integer}\ti_intWidth\t\tWidth of the modal window\n\t */\n\tfunction getModalHtmlElementFinalInformation(i_strContent, i_strImages,\n\t\t\t\t\t\t\t\t\t\t\t\t i_intHeight, i_intWidth) {\n\t\t// size of the window\n\t\tvar l_strSize = \"\";\n\t\t// height of the window\n\t\tvar l_strHeight = \"\";\n\t\t// width of the window\n\t\tvar l_strWidth = \"\";\n\n\t\t// if a height is given\n\t\tif(i_intHeight !== 0){\n\t\t\tl_strHeight = \"height: \" + i_intHeight + \"px;\";\n\t\t}\n\t\t\n\t\t// if a width is given\n\t\tif(i_intWidth !== 0){\n\t\t\tl_strWidth = \"width: \" + i_intWidth + \"px;\";\n\t\t}\n\t\t\n\t\t// if there is a size given at all\n\t\tif(i_intHeight !== 0 || i_intWidth !== 0){\n\t\t\t// build the style tag\n\t\t\tl_strSize = 'style=\"' + l_strHeight + ' ' + l_strWidth + '\"';\n\t\t}\n\t\t\n\t\treturn [\n\t\t\t'<div id=\"modalwindow\" class=\"modal fade\" role=\"dialog\"',\n\t\t\t  l_strSize,\n\t\t\t  '>',\n\t\t\t  '<div class=\"modal-dialog\" role=\"document\">',\n\t\t\t    '<div class=\"modal-content\"',\n\t\t\t    l_strSize,\n\t\t\t    '>',\n\t\t\t      '<div class=\"modal-body\">',\n\t\t\t        '<div>',\n\t\t\t          i_strImages,\n\t\t\t        '</div>',\n\t\t\t        '<div>',\n\t\t\t          i_strContent,\n\t\t\t        '</div>',\n\t\t\t      '</div>',\n\t\t\t      '<div class=\"modal-footer\">',\n\t\t\t        '<button type=\"button\" class=\"btn btn-default\"',\n\t\t\t          'data-bs-dismiss=\"modal\">OK</button>',\n\t\t\t      '</div>',\n\t\t\t    '</div>',\n\t\t\t  '</div>',\n\t\t\t'</div>',\n\t\t   ].join('\\n');\n\t}\n}\n\n// ***************************************************************/\n// Constants of the glpairs class\n// ***************************************************************/\n\n// The name of the Identifiery of the Mapping array for external ID 1\nGlPairs.C_STR_ARR_ID_EXT_ID1 = 'extID1';\n// The name of the Identifiery of the Mapping array for external ID 2\nGlPairs.C_STR_ARR_ID_EXT_ID2 = 'extID2';\n\n// the Pairstype for the same image \nGlPairs.C_INT_PAIRS_TYPE_SamePic = 0;\n//the Pairstype for two similar images\nGlPairs.C_INT_PAIRS_TYPE_2Pic = 1;\n//the Pairstype for the image and text pair\nGlPairs.C_INT_PAIRS_TYPE_PicText = 2;\n//the Pairstype for the text only type\nGlPairs.C_INT_PAIRS_TYPE_TextOnly = 3;\n\n// the identifier of the upper area\nGlPairs.C_STR_AREA_UPPER = 'upper';\n//the identifier of the lower area\nGlPairs.C_STR_AREA_LOWER = 'lower';\n\n// the default class of the border from a card\nGlPairs.C_STR_CARD_BORDER_CLASS_DEFAULT = 'glpairs_cls_card_border';\n//the wrong class of the border from a card\nGlPairs.C_STR_CARD_BORDER_CLASS_WRONG = 'glpairs_cls_card_border_wrong';\n//the right class of the border from a card\nGlPairs.C_STR_CARD_BORDER_CLASS_RIGHT = 'glpairs_cls_card_border_right';\n\n// identifier for the ID suffix of the front card\nGlPairs.C_STR_ID_SUFFIX_FRONT = 'div_card_front';\n//identifier for the ID suffix of the back card\nGlPairs.C_STR_ID_SUFFIX_BACK = 'div_card_back';\n//identifier for the ID suffix of the result element\nGlPairs.C_STR_ID_SUFFIX_RESULT = 'glpairs_result';\n//identifier for the ID suffix of the border element\nGlPairs.C_STR_ID_SUFFIX_FRONT_CARD = 'front_card';\n//identifier for the ID suffix of the TD element which contains the whole card data\nGlPairs.C_STR_ID_SUFFIX_TD_CONTAINER = 'td_card';\n//identifier for the ID suffix of the div element from the front card\nGlPairs.C_STR_ID_SUFFIX_TD_CONTAINER = 'td_card';\n//identifier for the ID suffix of the card stack\nGlPairs.C_STR_ID_SUFFIX_CARD_STACK = 'glpairs_card_stack';\n//identifier for the ID suffix of the container for the whole card\nGlPairs.C_STR_ID_SUFFIX_CARD_OVERALL = 'overall_card';\n//identifier for the ID suffix of the img of the back card\nGlPairs.C_STR_ID_SUFFIX_IMG_BACK = 'img_back';\n//identifier for the ID suffix of the ckick hint box\nGlPairs.C_STR_ID_SUFFIX_CLICK_HINT = 'glpairs_click_hint';\n\n\n// ***************************************************************/\n// Static attributes of the glpairs class\n// ***************************************************************/\n\n//static array with all pairs objects of the current page\nGlPairs.arrPairs = [];\n\n// ***************************************************************/\n// Static method/function part\n// ***************************************************************/\n\n/**\n * The main init method which is starting all pairs games of the current page\n *\n * @function\n * @memberOf GLPairs\n * @param {array} i_arrPairsUniqueIds\tArray with all unique IDs of the \n * \t\t\t\t\t\t\t\t\t\tpairs games which should be started.\n*/\nGlPairs.glpairsInit = function(i_arrPairsUniqueIds) {\n\t// turn on the strict mode\n\t\"use strict\";\n\t// for every unique ID\n\tjQuery.each(i_arrPairsUniqueIds,\n\t\tfunction(i_intIndex, i_strUniqueId){\n\t\t\tvar objPairs = new GlPairs(i_strUniqueId);\n\t\t\t\n\t\t\t// start initial ajax request\n\t\t\tobjPairs.requestAjaxGeneralPairsData();\n\t\t}\n\t);\t\n};\n\n/**\n * static handler for Ajax response\n * \n * @function\n * @memberOf GLPairs\n * @param {String} i_strResponseFunc\tFunction to be called for handling the ajax request.\n * @param {Object} i_jsonResult\t\t\tJson container with all the received data.\n */\nGlPairs.glpairsHandleAjaxResponse = function(i_strResponseFunc, i_jsonResult) {\n\t// turn on the strict mode\n\t\"use strict\";\n\t\n\t// get the corresponding pairs game object\n\tvar objPairs = GlPairs.arrPairs[i_jsonResult.strUniqueId];\n\t\n\t// unset ajax mode\n\tobjPairs.setAjaxWaitParams(false);\n\n\t// call the specific method which handle the ajax response\n\tobjPairs[i_strResponseFunc](i_jsonResult);\n};\n\n/**\n * static handler for the events\n * \n * @function\n * @memberOf GLPairs\n * @param {integer} i_intUniqueId \t\t\tUnique ID of the pairs game. \n * @param {Object} \ti_objEvent\t\t\t\tEvent object.\n * @param {String}\ti_strHandler\t\t\tName of the Method which processing the event request.\t\n * @param {Object}\t$i_objCurrentElement\tjQuery object this is the element which has received the event.\n */\nGlPairs.glpairsEventHandler = function(i_intUniqueId, i_objEvent, i_strHandler, $i_objCurrentElement ) {\n\t// turn on the strict mode\n\t\"use strict\";\n\t// get the corresponding pairs game object\n\tvar objPairs = GlPairs.arrPairs[i_intUniqueId];\n\n\t// call the actual event handler\n\tobjPairs[i_strHandler](i_objEvent, $i_objCurrentElement);\n};\n\n\n//**************************************************************************************** //\n//**************************************************************************************** //\n// finally start the glpairs plugin for all IDs stored globaly in the array arrGlpairsIds\n// if document ready, call the init function of the game\nGlPairs.glpairsInit(arrGlpairsIds);\n//**************************************************************************************** //\n//**************************************************************************************** //\n"],"names":["GlPairs","i_strUniqueId","arrPairs","this","m_strPairsId","m_arrExtIdMapping","m_objCardTurnState","m_arrUidMapping","m_objFinalInformation","m_intPairsType","m_blnSplitmode","m_objI18n","m_objClickedCardParams","upperCardChoosed","lowerCardChoosed","upperExtId","lowerExtId","m_TimeoutOverlayClick","m_TimeoutClickHint","m_intPairsCount","m_intTurnbackDelay","m_intClickHintDelay","m_intTurnDuration","m_intMoveStackDuration","m_intPointsPlus","m_intPointsMinus","m_blnTestMode","m_intTestModeTurnDelay","getMainDivId","getIdArrayFromId","i_strId","l_intStrPos","l_objResult","pairsId","extId","area","suffix","indexOf","substr","toggleClassOfCardElement","i_intExtId","i_strArea","i_strCardElement","i_blnToFront","$l_objCardElement","l_fltTurnDuration","l_strCardDivId","getIdFromExtId","jQuery","Math","round","css","transform","-moz-transform","-ms-transform","-o-transform","-webkit-transform","showFinalInformation","i_objFIData","i_blnForTestMode","$l_objModalBox","l_strContent","i_strContent","i_strImages","i_intHeight","i_intWidth","l_strSize","l_strHeight","l_strWidth","join","getModalHtmlElementFinalInformation","content","$l_objPictureElement","l_strHtmlContent","l_strArea","C_INT_PAIRS_TYPE_TextOnly","C_STR_AREA_UPPER","C_STR_ID_SUFFIX_FRONT_CARD","length","prop","getPictureHtmlContent","C_INT_PAIRS_TYPE_SamePic","getCorrespondingArea","getSelectedPictureHtmlContent","height","width","modal","show","on","afterPairProcessing","$i_objPicture","$l_objPictureElementNew","clone","removeClass","attr","picwidth","picheight","setChoosenIndicator","i_strNewClass","l_strCurrentArea","blinkBorder","i_strSuffix","$i_obj_card","i_strTargetClass","counter","window","setTimeout","toggleClass","C_STR_CARD_BORDER_CLASS_DEFAULT","setResultOfGame","i_intValue","$l_objResult","l_strResultID","C_STR_ID_SUFFIX_RESULT","l_intCurrentValue","parseInt","text","initializeClickedCardParams","gameFinishedDialog","l_strDialog","gameFinished","replace","getModalHtmlElement","getRandomNumber4Animation","l_fltRandom","random","flipOverCard","$l_objFrontside","C_STR_ID_SUFFIX_FRONT","C_STR_ID_SUFFIX_BACK","$l_objCardBackFirst","$l_objCardBackSecond","$l_objBorderElement","l_strCurrentBorderClass","i_objEvent","glpairsEventHandler","C_STR_CARD_BORDER_CLASS_RIGHT","C_STR_CARD_BORDER_CLASS_WRONG","getCorrespondingExtId","i_strExtId","l_intUId","C_STR_ARR_ID_EXT_ID1","C_STR_ARR_ID_EXT_ID2","C_STR_AREA_LOWER","requestAjaxGeneralPairsData","strGetParams","param","controllerName","actionName","actionArguments","i_strUniquId","setAjaxWaitParams","ajax","url","dataType","done","i_jsonResult","glpairsHandleAjaxResponse","processAjaxGeneralPairsData","l_arrCardIds","l_strMainDivId","result","arrExtIdMap","arrUidMap","pairsType","splitmode","i18n","pairscount","pluspoints","minuspoints","turnbackdelay","hintdelay","turnduration","stackduration","testmode","testmodeturndelay","finalinformation","l_intExtId","hasOwnProperty","initializeGlobals","find","each","i_intIndex","l_objElementId","push","turnAllCards","i_arrCardIds","shift","$l_objCurrentAnchor","click","i_blnSet","l_strMainDivID","m_blnAjaxMode","onMouseClickCard","$i_objCurrentCard","i_objElementId","isActive","l_blnReturn","modalElement","errorWrongCardClickedUpper","bootstrap","Modal","errorWrongCardClickedLower","isClickAllowed","C_STR_ID_SUFFIX_CARD_OVERALL","unbind","i_strEventHandler","$l_objMainDiv","$l_objOverlayDiv","id","style","position","top","left","append","trigger","$l_objDialog","l_intLeft","l_intDuration","C_STR_ID_SUFFIX_CLICK_HINT","class","html","clickHint","animate","opacity","remove","showAnimatedClickHint","setClickableOverlayDiv","onMouseClickOverlayPairFinished","$i_objOverlay","clearTimeout","onTurnBackCardEnd","$i_objBackCard","$i_objCard","$l_objCardStack","l_intOffsetTop","l_intOffsetLeft","l_fltRandomOffsetTop","l_fltRandomOffsetLeft","l_intCardstackOffset","l_intCardOffset","C_STR_ID_SUFFIX_CARD_STACK","offset","duration","easing","l_fltDegrees","C_INT_PAIRS_TYPE_2Pic","C_INT_PAIRS_TYPE_PicText","C_STR_ID_SUFFIX_TD_CONTAINER","C_STR_ID_SUFFIX_IMG_BACK","glpairsInit","i_arrPairsUniqueIds","i_strResponseFunc","objPairs","strUniqueId","i_intUniqueId","i_strHandler","$i_objCurrentElement","arrGlpairsIds"],"mappings":"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"}